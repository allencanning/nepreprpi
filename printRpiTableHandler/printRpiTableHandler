from __future__ import print_function
from __future__ import division

import json
import os, time
import urllib
from datetime import datetime
import boto3
from boto3.dynamodb.conditions import Key, Attr

os.environ['TZ'] = 'US/Eastern'
time.tzset()

dynamodb = boto3.resource('dynamodb')

print('Loading function')


## Query DB and get all the teams
def getTeams(gender,season):
  table_name=''
  if gender == "female":
    table_name = 'nepreprpigirlsteams'
  elif gender == "male":
    table_name = 'nepreprpiboysteams'

  t = dynamodb.Table(table_name)
  teams = t.query(KeyConditionExpression=Key('season').eq(season),
                   IndexName='season-name-index',
  )

  return teams['Items']

## Query DB and get all the games
def getGames(gender,season):
  table_name=''
  if gender == "female":
    table_name = 'nepreprpigirls'
  elif gender == "male":
    table_name = 'nepreprpiboys'

  g = dynamodb.Table(table_name)
  games = g.query(KeyConditionExpression=Key('season').eq(season))

  return games['Items']

## Loop through the games and calculate the wins and losses
def getRecords(games,teams):
  record = {}
  for game in games:
    # Set the wins and losses to 0
    if game['winner'] not in record:
      record[game['winner']] = {}
      record[game['winner']]['win'] = 0
      record[game['winner']]['loss'] = 0
    if game['loser'] not in record:
      record[game['loser']] = {}
      record[game['loser']]['win'] = 0
      record[game['loser']]['loss'] = 0

    record[game['winner']]['win'] += 1
    record[game['loser']]['loss'] += 1

  # calculate winpct
  for team in teams:
    if team['name'] in record:
      record[team['name']]['winpct'] = record[team['name']]['win']/(record[team['name']]['win']+record[team['name']]['loss'])

  return record

def getOwpct(games,record,team):
  numteams = 0
  owpct = 0
  for g in games:
    if team == g['winner'] or team == g['loser']:
      if team != g['winner']:
        numteams += 1
        owpct += record[g['winner']]['winpct']
      if team != g['loser']:
        numteams += 1
        owpct += record[g['loser']]['winpct']
  
  if numteams != 0:
    owpctavg = owpct / numteams
  else:
    owpctavg = 0
  
  return owpctavg

def getOOwpct(games,record,team):
  numteams = 0
  oowpct = 0
  for g in games:
    if team == g['winner'] or team == g['loser']:
      if team != g['winner']:
        numteams += 1
        owpct = getOwpct(games,record,g['winner'])
        oowpct += owpct
      if team != g['loser']:
        numteams += 1
        owpct = getOwpct(games,record,g['loser'])
        oowpct += owpct

  if numteams != 0:
    oowpctavg = oowpct / numteams
  else:
    oowpctavg = 0

  return oowpctavg

def printRpiTableHandler (event, context):
  if 'gender' in event:
    gender=event['gender']
  else:
    gender='male'
  
  # Get the season if passed in
  if 'season' in event:
    season=event['season']
  else:
    season=int(datetime.strftime(datetime.today(),"%Y"))

  # Get all game results
  games = getGames(gender,season)
  
  # Get all team names
  teams = getTeams(gender,season)
  
  # build record entries
  record = getRecords(games,teams)
  for team in teams:
      if team['name'] in record:
        owpct = getOwpct(games,record,team['name'])
        record[team['name']]['owpct'] = owpct
        oowpct = getOOwpct(games,record,team['name'])
        record[team['name']]['oowpct'] = oowpct
        record[team['name']]['rpi'] = (record[team['name']]['winpct']*.25)+(owpct*.50)+(oowpct*.25)

  # set the caption based on gender
  if gender == 'female':
    caption = 'Girls'
  elif gender == 'male':
    caption = 'Boys'
    
  today = datetime.strftime(datetime.today(),"%b %d, %Y")
  css = '<link rel="stylesheet" href="https://s3.amazonaws.com/nepreprpi/neprep.css" type="text/css" />'
  content = '<html><head>'+css+'</head><body>'
  content += '<div class="caption">Prep Lacrosse '+caption+' RPI Rankings as of '+today+'</div>'
  content += '<table>'
  content += '<tr><th>Rank</th><th>Name</th><th>Wins</th><th>Loss</th><th>WPCT</th><th>OWPCT</th><th>OOWPCT</th><th>RPI</th></tr>'
  rank = 1
  for team in sorted(record.iteritems(), key=lambda (x, y): y['rpi'], reverse=True):
    content += '<tr><td>'+str(rank)+'</td><td>'
    content += '<div class="left"><img height="25" width="25" src="https://s3.amazonaws.com/nepreprpi/icons/'+team[0]+'.png"></div>'
    content += '<div class="right"><a href="https://9pd8zvy326.execute-api.us-east-1.amazonaws.com/prod/printTeamTableHandler?gender='+gender+'&team='+urllib.quote_plus(team[0])+'">'+team[0]+'</a></div></td>'
    content += '<td>'+str(record[team[0]]['win'])+'</td>'
    content += '<td>'+str(record[team[0]]['loss'])+'</td>'
    content += "<td>%0.2f" % record[team[0]]['winpct']
    content += "</td>"
    content += "<td>%0.2f" % record[team[0]]['owpct']
    content += "</td>"
    content += "<td>%0.2f" % record[team[0]]['oowpct']
    content += "</td>"
    content += "<td>%0.2f" % record[team[0]]['rpi']
    content += "</td>"
    content += "</tr>\n"
    rank += 1

  content += '</table></body></html>'
  return content

